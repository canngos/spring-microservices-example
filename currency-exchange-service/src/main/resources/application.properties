spring.application.name=currency-exchange
server.port=8000
spring.config.import=optional:configserver:http://localhost:8888

spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true

# set the eureka url
eureka.client.service-url.default-zone=http://localhost:8761/eureka

# circuit breaker configuration
# max number of attempts before circuit breaker is opened
resilience4j.retry.instances.sample-api.maxAttempts=5
# wait duration between attempts
resilience4j.retry.instances.sample-api.wait-duration=3s

# this config makes the wait duration exponential. For example: The first retry will wait for 3s, the second for 6s, the third for 12s and so on
# Important if using cloud platform like aws.
#resilience4j.retry.instances.sample-api.enable-exponential-backoff=true

# this config says that if 90 percent of the requests fail, then open the circuit breaker
#resilience4j.circuitbreaker.instances.default.failure-rate-threshold=90

# this config is limiting the number of concurrent requests to 2 in a 10-second window. If the limit is exceeded, then the request is rejected.
resilience4j.ratelimiter.instances.default.limit-for-period=2
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s

# this config is limiting the number of concurrent requests to 10. If the limit is exceeded, then the request is rejected.
resilience4j.bulkhead.instances.default.max-concurrent-calls=10

# zipkin configuration. Trace every request.
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]